function pfPars = FindPFPars(trial, varargin)
% pfPars = FindPFPars(trial/pfObject, varargin)
%varargin - [pyrCluIdx, smoothFactor, IF_SAVE]
[pyrCluIdx, trialName, smoothFactor, IF_SAVE, states] = DefaultArgs(varargin, {'14', 'crt1', 0.01, 0, {'head', 'theta'}});

if ~isa(trial,'MTAPlaceField')
    if isa(trial, 'MTATrial')
        filebase = trial.name;
        pfObject =LoadPFObject(filebase, trialName);
        filebase = trial.name;
    end
else
    pfObject = trial;
    filebase = pfObject.filebase;
    posOfDots = regexp(filebase,'\.');
    filebase = filebase(1: posOfDots(1) -1);
    trial = MTATrial(filebase, [],pfObject.trialName);
    
end
nUnits = length(pyrCluIdx);
pfPars = [];
if ~isempty(nUnits) && nUnits ~= 0
    
    
    for kUnit = 1 : nUnits
        kRateMap = pfObject.rateMap{pyrCluIdx(kUnit)}; %%% FIX INDEXING
        absThresh = 8; % discard cells with firing rate less then 8
        IS_DISCARD(kUnit) = max(kRateMap(:)) < absThresh;
    end
    
    nAcceptedUnits = sum(~IS_DISCARD);
    acceptedUnits = pyrCluIdx(~IS_DISCARD);
    
    for kUnit = 1 : nAcceptedUnits
        
        kRateMap = pfObject.rateMap{acceptedUnits(kUnit)};
        smoothedRateMap = SmoothSurface(kRateMap, smoothFactor);
        %             maxSmoothedRate = max(smoothedRateMap(:));
        %             maxRateInd = LocalMinima2(- smoothedRateMap, - .8 * maxSmoothedRate, 12);
        
        [maxSmoothedRate, linIdx] = max(smoothedRateMap(:));
        [i,j]=ind2sub(size(smoothedRateMap), linIdx);
        maxRateXLoc = pfObject.xbin(i);
        maxRateYLoc = pfObject.ybin(j);
        %     plot(pfObject.xbin(i),pfObject.ybin(j),'ow')
        rateThresh = .707 * maxSmoothedRate;
        %             minima = LocalMinima2(smoothedRateMap, rateThresh, 2);
        
        threshMask(:,:,kUnit) = kRateMap > rateThresh;
        
        maskXY = threshMask(:,:,kUnit);
        z = find(maskXY);
        [i, j] = ind2sub(size(maskXY), z);
        z = [i'; j']; % dims x sampels
        comX = 0;
        comY = 0;
        rateSum = 0;
        for ii = 1 : length(i)
            comX = comX + smoothedRateMap(i(ii),j(ii)) * pfObject.xbin(i(ii));
            comY = comY + smoothedRateMap(i(ii),j(ii)) * pfObject.xbin(j(ii));
            rateSum = rateSum + smoothedRateMap(i(ii),j(ii));
        end
        comX = round(comX / rateSum);
        comY = round(comY /rateSum);
        
        pfPars.com(kUnit, :) = [comX, comY]; %center of mass
        %                smoothedRateMap(isnan(kRateMap)) = nan;
        pfPars.smoothRateMap(:,:,kUnit) = smoothedRateMap;
        pfPars.pkLoc(kUnit, :) = [maxRateXLoc, maxRateYLoc];
    end
end

%% find cell pairs with overlapping Place fields
if nAcceptedUnits > 1
    cellPairs = nchoosek(acceptedUnits, 2);
    nPairs = nchoosek(nAcceptedUnits, 2);
    for kPair = 1 : nPairs
        temp1 = threshMask(:,:,acceptedUnits == cellPairs(kPair,1)) & threshMask(:,:,acceptedUnits == cellPairs(kPair,2));
        IS_PF_OVERLAP(kPair) = sum(temp1(:)) ~= 0;
    end
    pfPars.selectedPairs = cellPairs(IS_PF_OVERLAP,:);
    pfPars.IS_DISCARD = IS_DISCARD;
    pfPars.acceptedUnits = acceptedUnits; % units that passed the absolute threshold criterion
    
    %     pfPars.selectedPairs = intersect(pfPars.PFOverlapPairs, nchoosek(pyrCluIdx(~IS_DISCARD),2), 'rows');
    %%  compute place field overlap params
    
    nOverlappingPairs = sum(IS_PF_OVERLAP);
    for kPair = 1 : nOverlappingPairs
        units = pfPars.selectedPairs(kPair, :);
        unitA = units(1);
        unitB = units(2);
        comA = pfPars.com(acceptedUnits == unitA, :,:);
        comB = pfPars.com(acceptedUnits == unitB, :,:);
        pfPars.comDist(kPair) = norm(comA - comB);
        pfPars.pkLocDist(kPair) = norm(pfPars.pkLoc(acceptedUnits == unitA, :,:) - pfPars.pkLoc(acceptedUnits == unitB, :,:));
    end
    %% spatial coherence
    nAcceptedUnits = sum(~IS_DISCARD);
    for kUnit = 1 : nAcceptedUnits
        rateMap = pfObject.rateMap{acceptedUnits(kUnit)};
        [nRows, nClmns] = size(rateMap);
        rateMap(isnan(rateMap)) = 0;
        for kRow = 1:nRows
            for kClmn = 1:nClmns
                avgNeigbRate(kRow, kClmn) = mean(GetNeighbours(rateMap, kRow, kClmn));
            end
        end
        avgNeigbRate = avgNeigbRate(:);
        rateMap = rateMap(:);
        rho = corrcoef(rateMap, avgNeigbRate);
        spatialCorretaltion(kUnit) = rho(1,2);
        clear avgNeigbRate;
    end
    
    %fisher z transform
    zr = atan(spatialCorretaltion);
    pfPars.spatialCoherence = zr;
    
    %% compute sparsity
    occupancy = Occupancy(trial, [],[],[],states);
    for kUnit = 1 : nAcceptedUnits
        smoothedRateMap = pfPars.smoothRateMap(:,:,kUnit);
        %             smoothedRateMap(isnan(smoothedRateMap)) = 0;
        sparsity(kUnit) = (occupancy(:)' * smoothedRateMap(:)) ^2 / (occupancy(:)' * (smoothedRateMap(:) .^2));
    end
    pfPars.sparsity = sparsity;
    maxSparsity = 0.3;
    minCoherence = 0.6;
    pfPars.stablePFUnits = ~IS_DISCARD & ismember(pyrCluIdx, acceptedUnits(sparsity < maxSparsity)) ...
        & ismember(pyrCluIdx,acceptedUnits(zr > minCoherence));
    if sum(pfPars.stablePFUnits) > 1
        pfPars.stablePairs = ismember(pfPars.selectedPairs, nchoosek(pyrCluIdx(pfPars.stablePFUnits),2),'rows');
    else
        pfPars.stablePairs = [];
    end
    %%
    if IF_SAVE
        save(['~/data/analysis/' filebase '/' filebase '.' mfilename '.' trialName '.mat'], 'pfPars');
    end
end
end


