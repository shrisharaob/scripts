
function out = SelectCells(filebase, varargin)
	%fullpath = ['/data/homes/gravio/data/nlx/jg05-20120315/' filebase];

    [LoadData, Arena] = DefaultArgs(varargin, {{'CluRes','Pfs'}}, 'cof');

    session = MTASession(filebase, LoadData, Arena);

    if FileExists(['../analysis/' filebase '.NeuronQuality.mat'])
        load(['../analysis/' filebase '.NeuronQuality.mat']);
    else
        fprintf('Run NeuronQuality')
    end
   
    %% classify pyr and iterneurons
    
    selectFeatures = {'AmpSym', 'SpkWidthR', 'FirRate'};
    f1 = [];
    f2 = [];
    f3 = [];
    acceptedClusters = [];
    for i = 1 : 12
        f1 = [f1; nq(i).(genvarname(selectFeatures{1}))];
        f2 = [f2; nq(i).(genvarname(selectFeatures{2}))];
        f3 = [f3; nq(i).(genvarname(selectFeatures{3}))];
    end
    cnq = CatStruct(nq);
    acceptedClusters = unique([cnq.ElNum,cnq.Clus],'rows');
	linearCluIdx = 1:size(acceptedClusters,1);
    features = [f1, f2, f3]; % nSamples x nDims 
    clear f1 f2 f3;
%% MOG it

    hold on;
    nFittingIterations = 10;
    nClusters = 2;
    logLikOld = -inf;
    for km = 1 : nFittingIterations
        fprintf(1,'\n ************************************************************');
        fprintf(1,'\n Fitting MOG m = \b\b\%2d \n',km);
        MOGout = MOG(features, nClusters);
        logLik(:,km) = MOGout.logLik;
        if(MOGout.logLik(end, km) > logLikOld)
            mu = MOGout.mu;
            sigma= MOGout.sigma;
            pk = MOGout.pk;
            logLikOld = logLik(end,km);
        end
    end
    fprintf(1,'\n DONE !!!');
    
    out.mu = mu;
    out.sigma = sigma;
    out.pk = pk;
    out.logLik = logLik;
    out.cluIndx = MOGout.cluIndx;
    out
save(['~/thesis/analysis/' filebase '.MOG.mat'],'out');
    %% fisher lda
   fLDAOut = FisherLDA(out.mu', out.sigma, features,  out.cluIndx);    
    %% figures
    figure;
    colors = MakeColorMap(nClusters);
    plot(features(out.cluIndx==1,1),features(out.cluIndx==1,2),'.g',...
        features(out.cluIndx==2,1),features(out.cluIndx==2,2),'r.')
    figure;
    plot3(features(out.cluIndx==1,1),features(out.cluIndx==1,2),features(out.cluIndx==1,3),'.g',...
        features(out.cluIndx==2,1),features(out.cluIndx==2,2),features(out.cluIndx==2,3),'r.')
    
    xLimits = [min(features(:,1)), max(features(:,1))];
    yLimits = [min(features(:,2)), max(features(:,2))];
    figure;
    Plot2DGaussians(mu,sigma,xLimits,yLimits,pk);
    hold on
    for k = 1 : 3
        plot(mu(1,k),mu(2,k),'*','MarkerSize',10,'MarkerEdgeColor',[1 1 1]);
    end
    figure;
    plot(logLik);
%% identify pyramidal cells
% cluindx 2 are the pyr cells 
pyrCellClusterIdx = acceptedClusters(out.cluIndx == 1,:);
 
linearPyrCluIdx = linearCluIdx(ismember(acceptedClusters,pyrCellClusterIdx,'rows'));
nPairs = nchoosek(length(linearPyrCluIdx), 2);
cellPairs = nchoosek(linearPyrCluIdx, 2);
    %%    [ccgMat,tAxis,~]=CCG(pRes,pClu,16,60,session.sampleRate,[6,7],'count');
