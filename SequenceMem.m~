function SequenceMem(filebase, varargin)
  [arena, roi, IF_REPORTFIG] = DefaultArgs(varargin, {{'bigSquare', 'linear'}, {'CA3'}, 1});
    %     gt = GenericTrial();
    kenjiSearch.roi = roi;
    kenjiSearch.arena = arena;
    matches = SearchKenji(kenjiSearch);
    matches = matches(strcmp(matches(:, 1), filebase), :);
    nTrials = size(matches, 1);
    refTr = 1;
    if nTrials == 1, return; end;
    for kTr = 1 : nTrials
        gt = GenericTrial(filebase, matches{kTr, 2});
        if kTr == 1
            load([gt.paths.analysis, gt.filebase, GenFiletag(roi, arena), '.commonClus.mat']);
        end 
        if length(commonClus) == 1, return; end; % if only one common unit across the trials
        fprintf(['\n trial :' gt.trialName ]);
        gt = gt.LoadPF;
        if ~isempty(gt.pfObject)
            %       roiClus = cell2mat(gt.GetRegionClu(roi));
            %roiPFUnits{kTr} = ismember(gt.pfObject.acceptedUnits, roiClus);
            %acceptedPFUnits{kTr} = gt.pfObject.acceptedUnits;
            roiPFPairs{kTr} = gt.pfObject.selectedPairs(ismember(gt.pfObject.selectedPairs, nchoosek(commonClus, 2), 'rows'), :);
            ratePk{kTr} =  gt.pfObject.ratePk(ismember(gt.pfObject.acceptedUnits, commonClus));
            pkDist{kTr} = gt.pfObject.pkDist(ismember(gt.pfObject.acceptedUnits, commonClus));
        end
    end